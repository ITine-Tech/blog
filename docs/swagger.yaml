basePath: /
definitions:
  cmd_api.UpdatePostPayload:
    properties:
      text:
        type: string
      title:
        type: string
    type: object
  main.CreateComment:
    properties:
      content:
        type: string
    type: object
  main.CreatePost:
    properties:
      tags:
        items:
          type: string
        type: array
      text:
        type: string
      title:
        type: string
    type: object
  main.CreateUserTokenPayload:
    properties:
      password:
        maxLength: 50
        minLength: 5
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - password
    - username
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 50
        minLength: 5
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.UpdateUserPayload:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
  main.UserWithToken:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/store.Role'
      role_id:
        type: integer
      token:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  store.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user:
        $ref: '#/definitions/store.User'
      user_id:
        type: string
    type: object
  store.Post:
    properties:
      comments:
        items:
          $ref: '#/definitions/store.Comment'
        type: array
      created_at:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      text:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      version:
        type: integer
    type: object
  store.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/store.Role'
      role_id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: christine.gundel@mail.schwarz
    name: Christine Gundel
  description: API for Berta's blog
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Berta's Beautiful Blog
paths:
  /authentication/token:
    post:
      consumes:
      - application/json
      description: creates a token for a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: creates a token
      tags:
      - Authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Register a user
      parameters:
      - description: userPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Register a user
      tags:
      - Authentication
  /feed:
    get:
      consumes:
      - application/json
      description: Get all posts by ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get all posts by ID
      tags:
      - Feed
  /feed/{postID}:
    get:
      consumes:
      - application/json
      description: Get a post by ID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "404":
          description: Not found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get a post by ID
      tags:
      - Feed
  /healthcheck:
    get:
      description: Healthcheck endpoint
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Healthcheck
      tags:
      - Ops
  /posts:
    post:
      consumes:
      - application/json
      description: Creates a new post
      parameters:
      - description: postPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreatePost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a post
      tags:
      - Posts
  /posts/{postID}:
    delete:
      consumes:
      - application/json
      description: Deletes a post
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "404":
          description: Not found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a post
      tags:
      - Posts
    patch:
      consumes:
      - application/json
      description: Updates a post by ID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/cmd_api.UpdatePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Post'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a post by ID
      tags:
      - Posts
  /posts/comments/{postID}:
    post:
      consumes:
      - application/json
      description: Creates a new comment
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      - description: commentsPayload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateComment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Comment'
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a comment
      tags:
      - Comments
  /users:
    get:
      consumes:
      - application/json
      description: Fetches all user profiles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches all user profiles
      tags:
      - Users
  /users/{userID}:
    delete:
      consumes:
      - application/json
      description: Deletes a user profile
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "404":
          description: Not found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a user profile
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Fetches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile by ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Updates a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a user profile by ID
      tags:
      - Users
  /users/activate/{token}:
    put:
      description: Activates/registers a user by invitation token
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Activates/registers a user
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
